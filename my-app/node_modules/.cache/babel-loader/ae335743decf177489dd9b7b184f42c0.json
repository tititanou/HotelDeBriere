{"remainingRequest":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\src\\components\\SimpleEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\src\\components\\SimpleEditor.vue","mtime":1595840870281},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iOwovLwovLwovLwovLwovLwovLwppbXBvcnQgUXVpbGwgZnJvbSAncXVpbGwnOwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IHsKICAgIHZhbHVlOiB7CiAgICAgIGRlZmF1bHQ6ICcnLAogICAgICB0eXBlOiBTdHJpbmcKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBlZGl0b3JDb250ZW50OiBudWxsLAogICAgICBlZGl0b3JJbnN0YW5jZTogbnVsbCwKICAgICAgZWRpdG9yT3B0czogewogICAgICAgIG1vZHVsZXM6IHsKICAgICAgICAgIHRvb2xiYXI6IFtbewogICAgICAgICAgICAnaGVhZGVyJzogWzEsIDIsIDMsIDQsIDUsIDYsIGZhbHNlXQogICAgICAgICAgfV0sIFt7CiAgICAgICAgICAgICdmb250JzogW10KICAgICAgICAgIH1dLCBbJ2JvbGQnLCAnaXRhbGljJywgJ3VuZGVybGluZScsICdzdHJpa2UnXSwgWydibG9ja3F1b3RlJywgJ2NvZGUtYmxvY2snXSwgW3sKICAgICAgICAgICAgJ2xpc3QnOiAnb3JkZXJlZCcKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgJ2xpc3QnOiAnYnVsbGV0JwogICAgICAgICAgfSwgewogICAgICAgICAgICAnYWxpZ24nOiBbXQogICAgICAgICAgfV0sIFt7CiAgICAgICAgICAgICdjb2xvcic6IFtdCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgICdiYWNrZ3JvdW5kJzogW10KICAgICAgICAgIH1dLCBbJ2NsZWFuJ10sIFsnbGluaycsICdpbWFnZScsICd2aWRlbyddLCBbewogICAgICAgICAgICAnZGlyZWN0aW9uJzogJ3J0bCcKICAgICAgICAgIH1dXQogICAgICAgIH0sCiAgICAgICAgdGhlbWU6ICdzbm93JwogICAgICB9CiAgICB9OwogIH0sCiAgd2F0Y2g6IHsKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShuZXdWYWwpIHsKICAgICAgLy8gT25seSB1cGRhdGUgdGhlIGNvbnRlbnQgaWYgaXQncyBjaGFuZ2VkIGZyb20gYW4gZXh0ZXJuYWwgc291cmNlCiAgICAgIC8vIG9yIGVsc2UgaXQnbGwgYWN0IHdlaXJkIHdoZW4geW91IHRyeSB0byB0eXBlIGFueXRoaW5nCiAgICAgIGlmIChuZXdWYWwgIT09IHRoaXMuZWRpdG9yQ29udGVudCkgewogICAgICAgIHRoaXMuZWRpdG9ySW5zdGFuY2UucGFzdGVIVE1MKG5ld1ZhbCk7CiAgICAgIH0KICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmluaXRpYWxpemVFZGl0b3IoKTsKICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICAvLyBUdXJuIG9mZiBhbGwgbGlzdGVuZXJzIHNldCBvbiB0ZXh0LWNoYW5nZQogICAgdGhpcy5lZGl0b3JJbnN0YW5jZS5vZmYoJ3RleHQtY2hhbmdlJyk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0aWFsaXplRWRpdG9yOiBmdW5jdGlvbiBpbml0aWFsaXplRWRpdG9yKCkgewogICAgICAvLyBTZXQgaW5pdGlhbCBjb250ZW50IHRoYXQncyBnb2luZyB0byBiZSBwaWNrZWQgdXAgYnkgUXVpbGwKICAgICAgdGhpcy4kcmVmcy5lZGl0b3JOb2RlLmlubmVySFRNTCA9IHRoaXMudmFsdWU7IC8vIENyZWF0ZSB0aGUgUXVpbGwgaW5zdGFuY2UKCiAgICAgIHRoaXMuZWRpdG9ySW5zdGFuY2UgPSBuZXcgUXVpbGwodGhpcy4kcmVmcy5lZGl0b3JOb2RlLCB0aGlzLmVkaXRvck9wdHMpOyAvLyBTZXR1cCBoYW5kbGVyIGZvciB3aGVuZXZlciB0aGluZ3MgY2hhbmdlIGluc2lkZSBRdWlsbAoKICAgICAgdGhpcy5lZGl0b3JJbnN0YW5jZS5vbigndGV4dC1jaGFuZ2UnLCB0aGlzLm9uRWRpdG9yQ29udGVudENoYW5nZSk7IC8vIFNhdmUgYW55IGluaXRpYWwgY29udGVudCB0byB0aGlzLmVkaXRvckNvbnRlbnQKCiAgICAgIHRoaXMuc2V0RWRpdG9yQ29udGVudCgpOwogICAgfSwKICAgIG9uRWRpdG9yQ29udGVudENoYW5nZTogZnVuY3Rpb24gb25FZGl0b3JDb250ZW50Q2hhbmdlKCkgewogICAgICAvLyBXaGVuZXZlciB3ZSBjaGFuZ2UgYW55dGhpbmcsIHVwZGF0ZSB0aGlzLmVkaXRvckNvbnRlbnQKICAgICAgdGhpcy5zZXRFZGl0b3JDb250ZW50KCk7IC8vIFRoZW4gZW1pdCBpdHMgdmFsdWUgYXMgaW5wdXQgc28gd2UgaGF2ZSBhIHdvcmtpbmcgdi1tb2RlbAogICAgICAvLyBUaGlzICRlbWl0IHdpbGwgYmUgY2F0Y2hlZCB1cCBpbiB0aGUgd2F0Y2g6dmFsdWUKICAgICAgLy8gdGhhdCdzIHdoeSB3ZSBndWFyZCBhZ2FpbnN0IGNhbGxpbmcgcGFzdGVIVE1MCiAgICAgIC8vIGNhbGxpbmcgdGhhdCBmdW5jdGlvbiB3aGlsZSB3ZSBhcmUgdHlwaW5nIGlzIHVuZGVzaXJhYmxlCgogICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHRoaXMuZWRpdG9yQ29udGVudCk7CiAgICB9LAogICAgc2V0RWRpdG9yQ29udGVudDogZnVuY3Rpb24gc2V0RWRpdG9yQ29udGVudCgpIHsKICAgICAgdGhpcy5lZGl0b3JDb250ZW50ID0gdGhpcy5lZGl0b3JJbnN0YW5jZS5nZXRUZXh0KCkudHJpbSgpID8gdGhpcy5lZGl0b3JJbnN0YW5jZS5yb290LmlubmVySFRNTCA6ICcnOwogICAgfQogIH0KfTs="},{"version":3,"sources":["SimpleEditor.vue"],"names":[],"mappings":";;;;;;;AAOA,OAAA,KAAA,MAAA,OAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,OAAA,EAAA,EADA;AAEA,MAAA,IAAA,EAAA;AAFA;AADA,GADA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,IADA;AAEA,MAAA,cAAA,EAAA,IAFA;AAGA,MAAA,UAAA,EAAA;AACA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA,CACA,CAAA;AAAA,sBAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA;AAAA,WAAA,CADA,EAEA,CAAA;AAAA,oBAAA;AAAA,WAAA,CAFA,EAGA,CAAA,MAAA,EAAA,QAAA,EAAA,WAAA,EAAA,QAAA,CAHA,EAIA,CAAA,YAAA,EAAA,YAAA,CAJA,EAKA,CAAA;AAAA,oBAAA;AAAA,WAAA,EAAA;AAAA,oBAAA;AAAA,WAAA,EAAA;AAAA,qBAAA;AAAA,WAAA,CALA,EAMA,CAAA;AAAA,qBAAA;AAAA,WAAA,EAAA;AAAA,0BAAA;AAAA,WAAA,CANA,EAOA,CAAA,OAAA,CAPA,EAQA,CAAA,MAAA,EAAA,OAAA,EAAA,OAAA,CARA,EASA,CAAA;AAAA,yBAAA;AAAA,WAAA,CATA;AADA,SADA;AAcA,QAAA,KAAA,EAAA;AAdA;AAHA,KAAA;AAoBA,GA7BA;AA+BA,EAAA,KAAA,EAAA;AACA,IAAA,KADA,iBACA,MADA,EACA;AACA;AACA;AACA,UAAA,MAAA,KAAA,KAAA,aAAA,EAAA;AACA,aAAA,cAAA,CAAA,SAAA,CAAA,MAAA;AACA;AACA;AAPA,GA/BA;AAyCA,EAAA,OAzCA,qBAyCA;AACA,SAAA,gBAAA;AACA,GA3CA;AA6CA,EAAA,aA7CA,2BA6CA;AACA;AACA,SAAA,cAAA,CAAA,GAAA,CAAA,aAAA;AACA,GAhDA;AAkDA,EAAA,OAAA,EAAA;AACA,IAAA,gBADA,8BACA;AACA;AACA,WAAA,KAAA,CAAA,UAAA,CAAA,SAAA,GAAA,KAAA,KAAA,CAFA,CAGA;;AACA,WAAA,cAAA,GAAA,IAAA,KAAA,CAAA,KAAA,KAAA,CAAA,UAAA,EAAA,KAAA,UAAA,CAAA,CAJA,CAKA;;AACA,WAAA,cAAA,CAAA,EAAA,CAAA,aAAA,EAAA,KAAA,qBAAA,EANA,CAOA;;AACA,WAAA,gBAAA;AACA,KAVA;AAWA,IAAA,qBAXA,mCAWA;AACA;AACA,WAAA,gBAAA,GAFA,CAGA;AACA;AACA;AACA;;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,KAAA,aAAA;AACA,KAnBA;AAoBA,IAAA,gBApBA,8BAoBA;AACA,WAAA,aAAA,GAAA,KAAA,cAAA,CAAA,OAAA,GAAA,IAAA,KACA,KAAA,cAAA,CAAA,IAAA,CAAA,SADA,GAEA,EAFA;AAGA;AAxBA;AAlDA,CAAA","sourcesContent":["<template lang=\"pug\">\r\n.simple-editor\r\n  .editor-node(ref=\"editorNode\")\r\n</template>\r\n\r\n\r\n<script>\r\nimport Quill from 'quill'\r\n\r\nexport default {\r\n  props: {\r\n    value: {\r\n      default: '',\r\n      type: String\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      editorContent: null,\r\n      editorInstance: null,\r\n      editorOpts: {\r\n        modules: {\r\n          toolbar: [\r\n            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n            [{ 'font': [] }],\r\n            ['bold', 'italic', 'underline', 'strike'],\r\n            ['blockquote', 'code-block'],\r\n            [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'align': [] }],\r\n            [{ 'color': [] }, { 'background': [] }],\r\n            ['clean'],\r\n            ['link', 'image', 'video'],\r\n            [{ 'direction': 'rtl' }]\r\n          ]\r\n        },\r\n        theme: 'snow'\r\n      }\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    value (newVal) {\r\n      // Only update the content if it's changed from an external source\r\n      // or else it'll act weird when you try to type anything\r\n      if (newVal !== this.editorContent) {\r\n        this.editorInstance.pasteHTML(newVal)\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.initializeEditor()\r\n  },\r\n\r\n  beforeDestroy () {\r\n    // Turn off all listeners set on text-change\r\n    this.editorInstance.off('text-change')\r\n  },\r\n\r\n  methods: {\r\n    initializeEditor () {\r\n      // Set initial content that's going to be picked up by Quill\r\n      this.$refs.editorNode.innerHTML = this.value\r\n      // Create the Quill instance\r\n      this.editorInstance = new Quill(this.$refs.editorNode, this.editorOpts)\r\n      // Setup handler for whenever things change inside Quill\r\n      this.editorInstance.on('text-change', this.onEditorContentChange)\r\n      // Save any initial content to this.editorContent\r\n      this.setEditorContent()\r\n    },\r\n    onEditorContentChange () {\r\n      // Whenever we change anything, update this.editorContent\r\n      this.setEditorContent()\r\n      // Then emit its value as input so we have a working v-model\r\n      // This $emit will be catched up in the watch:value\r\n      // that's why we guard against calling pasteHTML\r\n      // calling that function while we are typing is undesirable\r\n      this.$emit('input', this.editorContent)\r\n    },\r\n    setEditorContent () {\r\n      this.editorContent = this.editorInstance.getText().trim()\r\n        ? this.editorInstance.root.innerHTML\r\n        : ''\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style lang=\"sass\">\r\n@import 'quill/dist/quill.snow.css'\r\n</style>"],"sourceRoot":"src/components"}]}