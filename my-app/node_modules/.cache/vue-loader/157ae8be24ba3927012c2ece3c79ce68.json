{"remainingRequest":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\src\\components\\Header.vue?vue&type=template&id=61dd7a3d&scoped=true&","dependencies":[{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\src\\components\\Header.vue","mtime":1595412324939},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}