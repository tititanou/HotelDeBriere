{"remainingRequest":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\src\\components\\SimpleEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\src\\components\\SimpleEditor.vue","mtime":1595840870281},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\r_kev\\Documents\\SiteWebStage\\HotelDeBriere\\my-app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgUXVpbGwgZnJvbSAncXVpbGwnDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgcHJvcHM6IHsNCiAgICB2YWx1ZTogew0KICAgICAgZGVmYXVsdDogJycsDQogICAgICB0eXBlOiBTdHJpbmcNCiAgICB9DQogIH0sDQoNCiAgZGF0YSAoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGVkaXRvckNvbnRlbnQ6IG51bGwsDQogICAgICBlZGl0b3JJbnN0YW5jZTogbnVsbCwNCiAgICAgIGVkaXRvck9wdHM6IHsNCiAgICAgICAgbW9kdWxlczogew0KICAgICAgICAgIHRvb2xiYXI6IFsNCiAgICAgICAgICAgIFt7ICdoZWFkZXInOiBbMSwgMiwgMywgNCwgNSwgNiwgZmFsc2VdIH1dLA0KICAgICAgICAgICAgW3sgJ2ZvbnQnOiBbXSB9XSwNCiAgICAgICAgICAgIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJywgJ3N0cmlrZSddLA0KICAgICAgICAgICAgWydibG9ja3F1b3RlJywgJ2NvZGUtYmxvY2snXSwNCiAgICAgICAgICAgIFt7ICdsaXN0JzogJ29yZGVyZWQnIH0sIHsgJ2xpc3QnOiAnYnVsbGV0JyB9LCB7ICdhbGlnbic6IFtdIH1dLA0KICAgICAgICAgICAgW3sgJ2NvbG9yJzogW10gfSwgeyAnYmFja2dyb3VuZCc6IFtdIH1dLA0KICAgICAgICAgICAgWydjbGVhbiddLA0KICAgICAgICAgICAgWydsaW5rJywgJ2ltYWdlJywgJ3ZpZGVvJ10sDQogICAgICAgICAgICBbeyAnZGlyZWN0aW9uJzogJ3J0bCcgfV0NCiAgICAgICAgICBdDQogICAgICAgIH0sDQogICAgICAgIHRoZW1lOiAnc25vdycNCiAgICAgIH0NCiAgICB9DQogIH0sDQoNCiAgd2F0Y2g6IHsNCiAgICB2YWx1ZSAobmV3VmFsKSB7DQogICAgICAvLyBPbmx5IHVwZGF0ZSB0aGUgY29udGVudCBpZiBpdCdzIGNoYW5nZWQgZnJvbSBhbiBleHRlcm5hbCBzb3VyY2UNCiAgICAgIC8vIG9yIGVsc2UgaXQnbGwgYWN0IHdlaXJkIHdoZW4geW91IHRyeSB0byB0eXBlIGFueXRoaW5nDQogICAgICBpZiAobmV3VmFsICE9PSB0aGlzLmVkaXRvckNvbnRlbnQpIHsNCiAgICAgICAgdGhpcy5lZGl0b3JJbnN0YW5jZS5wYXN0ZUhUTUwobmV3VmFsKQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCg0KICBtb3VudGVkICgpIHsNCiAgICB0aGlzLmluaXRpYWxpemVFZGl0b3IoKQ0KICB9LA0KDQogIGJlZm9yZURlc3Ryb3kgKCkgew0KICAgIC8vIFR1cm4gb2ZmIGFsbCBsaXN0ZW5lcnMgc2V0IG9uIHRleHQtY2hhbmdlDQogICAgdGhpcy5lZGl0b3JJbnN0YW5jZS5vZmYoJ3RleHQtY2hhbmdlJykNCiAgfSwNCg0KICBtZXRob2RzOiB7DQogICAgaW5pdGlhbGl6ZUVkaXRvciAoKSB7DQogICAgICAvLyBTZXQgaW5pdGlhbCBjb250ZW50IHRoYXQncyBnb2luZyB0byBiZSBwaWNrZWQgdXAgYnkgUXVpbGwNCiAgICAgIHRoaXMuJHJlZnMuZWRpdG9yTm9kZS5pbm5lckhUTUwgPSB0aGlzLnZhbHVlDQogICAgICAvLyBDcmVhdGUgdGhlIFF1aWxsIGluc3RhbmNlDQogICAgICB0aGlzLmVkaXRvckluc3RhbmNlID0gbmV3IFF1aWxsKHRoaXMuJHJlZnMuZWRpdG9yTm9kZSwgdGhpcy5lZGl0b3JPcHRzKQ0KICAgICAgLy8gU2V0dXAgaGFuZGxlciBmb3Igd2hlbmV2ZXIgdGhpbmdzIGNoYW5nZSBpbnNpZGUgUXVpbGwNCiAgICAgIHRoaXMuZWRpdG9ySW5zdGFuY2Uub24oJ3RleHQtY2hhbmdlJywgdGhpcy5vbkVkaXRvckNvbnRlbnRDaGFuZ2UpDQogICAgICAvLyBTYXZlIGFueSBpbml0aWFsIGNvbnRlbnQgdG8gdGhpcy5lZGl0b3JDb250ZW50DQogICAgICB0aGlzLnNldEVkaXRvckNvbnRlbnQoKQ0KICAgIH0sDQogICAgb25FZGl0b3JDb250ZW50Q2hhbmdlICgpIHsNCiAgICAgIC8vIFdoZW5ldmVyIHdlIGNoYW5nZSBhbnl0aGluZywgdXBkYXRlIHRoaXMuZWRpdG9yQ29udGVudA0KICAgICAgdGhpcy5zZXRFZGl0b3JDb250ZW50KCkNCiAgICAgIC8vIFRoZW4gZW1pdCBpdHMgdmFsdWUgYXMgaW5wdXQgc28gd2UgaGF2ZSBhIHdvcmtpbmcgdi1tb2RlbA0KICAgICAgLy8gVGhpcyAkZW1pdCB3aWxsIGJlIGNhdGNoZWQgdXAgaW4gdGhlIHdhdGNoOnZhbHVlDQogICAgICAvLyB0aGF0J3Mgd2h5IHdlIGd1YXJkIGFnYWluc3QgY2FsbGluZyBwYXN0ZUhUTUwNCiAgICAgIC8vIGNhbGxpbmcgdGhhdCBmdW5jdGlvbiB3aGlsZSB3ZSBhcmUgdHlwaW5nIGlzIHVuZGVzaXJhYmxlDQogICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHRoaXMuZWRpdG9yQ29udGVudCkNCiAgICB9LA0KICAgIHNldEVkaXRvckNvbnRlbnQgKCkgew0KICAgICAgdGhpcy5lZGl0b3JDb250ZW50ID0gdGhpcy5lZGl0b3JJbnN0YW5jZS5nZXRUZXh0KCkudHJpbSgpDQogICAgICAgID8gdGhpcy5lZGl0b3JJbnN0YW5jZS5yb290LmlubmVySFRNTA0KICAgICAgICA6ICcnDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["SimpleEditor.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SimpleEditor.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"pug\">\r\n.simple-editor\r\n  .editor-node(ref=\"editorNode\")\r\n</template>\r\n\r\n\r\n<script>\r\nimport Quill from 'quill'\r\n\r\nexport default {\r\n  props: {\r\n    value: {\r\n      default: '',\r\n      type: String\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      editorContent: null,\r\n      editorInstance: null,\r\n      editorOpts: {\r\n        modules: {\r\n          toolbar: [\r\n            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n            [{ 'font': [] }],\r\n            ['bold', 'italic', 'underline', 'strike'],\r\n            ['blockquote', 'code-block'],\r\n            [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'align': [] }],\r\n            [{ 'color': [] }, { 'background': [] }],\r\n            ['clean'],\r\n            ['link', 'image', 'video'],\r\n            [{ 'direction': 'rtl' }]\r\n          ]\r\n        },\r\n        theme: 'snow'\r\n      }\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    value (newVal) {\r\n      // Only update the content if it's changed from an external source\r\n      // or else it'll act weird when you try to type anything\r\n      if (newVal !== this.editorContent) {\r\n        this.editorInstance.pasteHTML(newVal)\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.initializeEditor()\r\n  },\r\n\r\n  beforeDestroy () {\r\n    // Turn off all listeners set on text-change\r\n    this.editorInstance.off('text-change')\r\n  },\r\n\r\n  methods: {\r\n    initializeEditor () {\r\n      // Set initial content that's going to be picked up by Quill\r\n      this.$refs.editorNode.innerHTML = this.value\r\n      // Create the Quill instance\r\n      this.editorInstance = new Quill(this.$refs.editorNode, this.editorOpts)\r\n      // Setup handler for whenever things change inside Quill\r\n      this.editorInstance.on('text-change', this.onEditorContentChange)\r\n      // Save any initial content to this.editorContent\r\n      this.setEditorContent()\r\n    },\r\n    onEditorContentChange () {\r\n      // Whenever we change anything, update this.editorContent\r\n      this.setEditorContent()\r\n      // Then emit its value as input so we have a working v-model\r\n      // This $emit will be catched up in the watch:value\r\n      // that's why we guard against calling pasteHTML\r\n      // calling that function while we are typing is undesirable\r\n      this.$emit('input', this.editorContent)\r\n    },\r\n    setEditorContent () {\r\n      this.editorContent = this.editorInstance.getText().trim()\r\n        ? this.editorInstance.root.innerHTML\r\n        : ''\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style lang=\"sass\">\r\n@import 'quill/dist/quill.snow.css'\r\n</style>"]}]}